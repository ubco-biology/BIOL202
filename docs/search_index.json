[["index.html", "Tutorials for BIOL202: Introduction to Biostatistics Welcome", " Tutorials for BIOL202: Introduction to Biostatistics Jason Pither 2021-09-09 Welcome This is an open source online book that includes all tutorials and other resources for the “lab” portion of the course BIOL202: Introduction to Biostatistics, at the University of British Columbia, Okanagan campus. This book is currently under development, with sections being added weekly. "],["author.html", "Author", " Author I (Jason Pither) am an Associate Professor in the Department of Biology at the Okanagan campus of the University of British Columbia. I am an ecologist with interests in biogeography, community ecology, and landscape ecology. I have been using “R” (and its predecessor, “S”) in my research for over two decades, and has been teaching Introductory Biostatistics using R since 2014. "],["acknowledgments.html", "Acknowledgments", " Acknowledgments I am grateful to be able to live, work, and play on the traditional, ancestral, and unceded territory of the Syilx (Okanagan) people. To find out more about Indigenous territories where you live, consult https://native-land.ca. This online book borrows materials generously made openly available by the following keen educators: Chester Ismay and Albert Y. Kim (Statistical Inference via Data Science online book). This resource is licensed under a Creative Commons Attribution - NonCommercial-ShareAlike 4.0 International License. Mike Whitlock and Dolph Schluter (resources accompanying the text “Analysis of Biological Data”) "],["copyright.html", "Copyright", " Copyright This work is licenced under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) Please use the following for citing this document Pither, J. (2021). Tutorials for BIOL202: Introduction to Biostatistics. https://ubco-biology.github.io/BIOL202/index.html All source files are available on github. "],["what-is-R.html", "1 What are R and RStudio?", " 1 What are R and RStudio? It is assumed that you are using R via RStudio. First time users often confuse the two. At its simplest: R is like a car’s engine RStudio is like a car’s dashboard R: Engine RStudio: Dashboard More precisely, R is a programming language that runs computations while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. So the way of having access to a speedometer, rearview mirrors, and a navigation system makes driving much easier, using RStudio’s interface makes using R much easier as well. "],["install-R-Rstudio.html", "2 Installing R and RStudio", " 2 Installing R and RStudio Note The latest version of R is 4.1.1 (“Kick Things”). It is strongly recommended that you install this latest version, even if you have older versions already installed. Follow the instructions below, and optionally you can view this YouTube video here prior to starting the steps. Download and install both R and RStudio (Desktop version) on your computer. Note R needs to be installed successfully &gt;prior&lt; to installing RStudio (because the latter depends on the former) Figure out what operating system (and version) you have on your computer (e.g. Windows 10; Mac OS X 10.15 “Big Sur”) Go to this website and click on the appropriate download link at the top of the page (depending on your operating system, Windows / MacOS / Linux) For Windows users, download the “base” version; this file will be called something like R-4.1.1-win.exe. Executing this file launches a familiar Windows Setup Wizard that will install R on your computer. For Mac users, download the “pkg” file that is appropriate for your version of MacOS; the file will be called something like R-4.1.1.pkg. Download and run this installation package—just accept the default options and you will be ready to go. Now to install RStudio: once you have installed “R,” go to this website and click on the “download” button in the top right corner, then select the blue button underneath the “RStudio Desktop FREE” column. Then, click on the appropriate link under the “Installers for Supported Platforms” heading; this again depends on what platform / operating system you’re using. It will likely be one of the first two options. "],["start-r.html", "3 Start using R &amp; RStudio", " 3 Start using R &amp; RStudio Recall our car analogy from a previous tutorial. Much as we don’t drive a car by interacting directly with the engine but rather by using elements on the car’s dashboard, we won’t be using R directly but rather we will use RStudio’s interface. After you install R and RStudio on your computer, you’ll have two new programs AKA applications you can open. We will always work in RStudio and not R. In other words: R: Do not open this RStudio: Open this Launch RStudio on your computer to make sure it’s working (it loads R for you in the background). "],["Rstudio-interface.html", "3.1 The RStudio Interface", " 3.1 The RStudio Interface When you open RStudio, you should see something similar to the following: Note the four panes which are four panels dividing the screen: the source pane (top left), console pane (bottom left), the files pane (bottom right), and the environment pane (top right). Over the course of this chapter, you’ll come to learn what purpose each of these panes serves. "],["coding-basics.html", "3.2 Coding basics", " 3.2 Coding basics Please go through section 1.2 of the ModernDive online text called “How do I code in R?” This should take about 15 minutes. "],["packages.html", "4 R packages", " 4 R packages An R package is a collection of functions, data, and documentation that extends the capabilities of R. They are written by a world-wide community of R users. For example, among the most popular packages are: ggplot2 package for data visualization dplyr package for data wrangling tidyverse, which is a package that includes a collection of multiple packages (including the preceding two) that are all installed at once. We’ll be using this package in the course. There are two key things to remember about R packages: Installation: Most packages are not installed by default when you install R and RStudio. You need to install a package before you can use it. Once you’ve installed it, you likely don’t need to install it again unless you want to update it to a newer version of the package. Loading: Packages are not loaded automatically when you open RStudio. You need to load them everytime you open RStudio. "],["package-install.html", "4.1 Package installation", " 4.1 Package installation Let’s install the tidyverse package. There are two ways to install an R package: In the Files pane: Click on “Packages” Click on “Install” Type the name of the package under “Packages (separate multiple with space or comma):” In this case, type tidyverse Click “Install” Alternatively, in the Console pane type the following: install.packages(&quot;tidyverse&quot;) Note When working on your own computer, you only have to install a package once, unless you want to update an already installed package to the latest version. If you want to update a package to the latest version, then re-install it by repeating the above steps. HOWEVER: If you’re working on a school computer (in a lab), you may need to install packages each session. Packages that are listed in the “packages” pane when you start up RStudio are pre-installed, and therefore don’t need to be re-installed each time. "],["package-load.html", "4.2 Package loading", " 4.2 Package loading Let’s load the tidyverse package. After you’ve installed a package, you can now load it using the library() command. For example, to load the tidyverse package, run the following code in the Console pane: library(tidyverse) Note You have to reload each package you want to use every time you open a new session of RStudio. This is a little annoying to get used to and will be your most common error as you begin. When you see an error such as Error: could not find function remember that this likely comes from you trying to use a function in a package that has not been loaded. Remember to run the library() function with the appropriate package to fix this error. "],["intro-markdown.html", "5 Intro to R Markdown", " 5 Intro to R Markdown As you may have learned already from section 6 of the Biology Procedures and Guidelines resource, R Markdown is a markup language that provides an easy way to produce a rich, fully-documented reproducible analysis. It allows its user to share a single file that contains all of the commentary, R code, and metadata needed to reproduce the analysis from beginning to end. R Markdown allows for “chunks” of R code to be included along with Markdown text to produce a nicely formatted HTML, PDF, or Word file without having to know any complicated programming languages or having to fuss with getting the formatting just right in a Microsoft Word DOCX file. One R Markdown file can generate a variety of different formats and all of this is done in a single text file with a few bits of formatting. You’ll be pleasantly surprised at how easy it is to write an R Markdown document after your first few attempts. We will be using R Markdown to create reproducible lab reports. Note R Markdown is just one flavour of a markup language. RStudio can be used to edit R Markdown. There are many other markdown editors out there, but using RStudio is good for our purposes. "],["lit-programming.html", "5.1 Literate programming with R Markdown", " 5.1 Literate programming with R Markdown View the following short video: Why use R Markdown for Lab Reports? The preceding video described what can be referred to as literate programming: authoring a single document that integrates data analysis (executable code) with textual documentation, linking data, code, and text. In R Markdown, the executable R code is placed in “chunks,” and these are embedded throughout sections of regular text. For an example of an HTML (webpage) document that illustrates the effectiveness of literate programming, take a look at this HTML output - a webpage that accompanied a lab-based experiment examining the potential for freshwater diatoms to be successfully dispersed over long distances adhered to duck feathers. View the following youtube video on creating an R Markdown document: webpage. If you’d like additional introductory tutorials on R Markdown, see this one from RStudio: demo, or this one. "],["veryify-knit.html", "5.2 Making sure R Markdown knits to PDF", " 5.2 Making sure R Markdown knits to PDF Now we’re going to ensure R Markdown works the way we want. A key functionality we need is being able to “knit” our report to PDF format. For this, we need to install the tinytex package {#install_tinytex}. Copy and paste the following two lines of code into the command console of RStudio (the bottom left window panel), then press return: install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() RStudio will take a minute or two to install a bunch of things. Once it’s done, we’re ready to try knitting to PDF! Reminder Recall you only need to install a package once! And this should be the last time you need to deal with the tinytex package (you won’t need to “load” it in future), because now that it’s installed, its functionality works in the background with RStudio. While in RStudio, select the “+” dropdown icon at top left of RStudio window, and select R Markdown. RStudio may at this point install a bunch of things, and if so that’s ok. A window will then appear and you can replace the “Untitled” with something like “Test,” then select OK. This will open an R Markdown document in the top left panel. Don’t worry about all the text in there at this point. What we want to do is test whether it will “knit” (render) the document to PDF format. To do this: Select the “Knit” drop-down icon near the top left of the RStudio window, and select “Knit to PDF.” RStudio will ask you to first save the markdown file (save it anywhere with any name for now), then it will process the markdown file and render it to PDF. In a future tutorial we’ll discuss how to use R Markdown as part of a reproducible workflow. "],["r-resources.html", "6 Extra online resources", " 6 Extra online resources Note This page is still under development (Sept 8, 2021) Below we provide tables with various online resources, including ones that will help you troubleshoot. If you are googling for R code, make sure to also include package names in your search query (if you are using a specific package). For example, instead of googling “scatterplot in R,” google “scatterplot in R with ggplot2.” Rstudio provides links to several cheatsheets that will come in handy throughout the semester. You can get nice PDF versions of the files by going to Help -&gt; Cheatsheets inside RStudio: The book titled “Getting used to R, RStudio, and R Markdown” by Chester Ismay, which can be freely accessed here, is also a wonderful resource for for new users of R, RStudio, and R Markdown. It includes examples showing working with R Markdown files in RStudio recorded as GIFs. "],["online-resources.html", "6.1 R Resources Online", " 6.1 R Resources Online Learning R - Tutorials and workshop materials URL Purpose https://whitlockschluter3e.zoology.ubc.ca. R resources to accompany Whitlock &amp; Schluter text https://datacarpentry.org/R-genomics/01-intro-to-R.htm l Data Carpentry Intro R tutorials https://r-dir.com/learn/tutorials.html List of useful tutorials including videos https://www.rstudio.com/resources/webinars/ Various online learning materials at RStudio https://rmd4sci.njtierney.com R Markdown for Scientists http://r4ds.had.co.nz/index.html Hadley Wickham’s online book So many packages - how to find useful ones? URL Purpose http://blog.revolutionanalytics.com/beginner-tips/ Beginner tips https://mran.microsoft.com/packages/ Tool for exploring packages Data analysis in R URL Purpose https://www.zoology.ubc.ca/~schluter/R/ UBC zoology site handy stats reference http://statmethods.net/ Good general reference Data visualization in R URL Purpose http://statmethods.net/ Good general reference for graphing http://ggplot2.org/book/ Hadley Wickhams’s ggplot2 book online http://stats.idre.ucla.edu/r/seminars/ggplot2_intro/ Great tutorial on ggplot2 http://www.cookbook-r.com/Graphs/ Graphing with ggplot2 BLOGs and general resources URL Purpose https://www.r-bloggers.com/ Popular blog site, lots of info http://rseek.org/ Search engine for R help Resources for reproducible research / open science URL Purpose https://cos.io/ Center for Open Science https://ropensci.org/ Open science R resources http://geoscripting-wur.github.io/RProjectManagement/ Lessons about version control https://nicercode.github.io/ Helping to improve your code URL Purpose http://spatial.ly/r/ Example maps with R https://rstudio.github.io/leaflet/ Online mapping with R https://www.earthdatascience.org/courses/earth-analytics/ Excellent course https://geoscripting-wur.github.io/ Amazing “geoscripting” tutorial "],["repro-research.html", "7 Reproducible Research", " 7 Reproducible Research A key goal of our Biology program at UBC’s Okanagan campus is to foster appreciation for reproducible research, and to equip students (and professors) with skills that will help them undertake reproducible research themselves. In first year you learned from the Biology program’s introductory Open Science learning modules that reproducible research studies are not as common as one might assume. One key reason for this is insufficient documentation of all the steps taken along the research workflow. Moreover, conducting reproducible research is extremely challenging - more than most scientists appreciate. See, for example, an incredible, recent case concerning ageing experiments with C. elegans here. In the BIOL202 lectures you’ll learn more about the various causes of irreproducible research, and about the practices that can help promote reproducibility. In this lab component of the course, you’ll learn the basics of how to achieve an acceptable level of computational reproducibility (complete computational reproducibility is actually pretty tricky, but we’ll get close). "],["comp-repro.html", "7.1 Computational reproducibility", " 7.1 Computational reproducibility Almost all research, whether it’s conducted in the field or in a lab, includes a substantial amount of work that’s done on the computer. This includes data processing, statistical analyses, data visualization and presentation, and production of research outputs (e.g. publications). Some research is of course exclusively conducted on computers. The bottom line is that computer-based work forms a key and substantive part of all research workflows. Given that this work is done on computers (which are entirely controllable), it should be able to be reproduced exactly. This is known as computational reproducibility: an independent researcher should be able to access all data and scripts from a study, run those scripts, and get exactly the same outputs and results as reported in the original study. In this tutorial you’ll start gaining relevant experience and skills by producing a reproducible lab report. Note A workflow refers to the the steps you take when conducting your day-to-day work - say, on a term project, for example. Having a well-designed workflow improves efficiency, and when done right, reproducibility. It includes, for example, how you create, access, and manage files on your computer (or in the cloud). Following best practices for naming and organizing your files and directories on your computer will help ensure that you can spend more time doing the important work, and less time fiddling and trying to remember what you did and where you saved your work. It will also help your future self, when labs and assignments in upper year courses request that you use R and R Markdown for analyses and reports. Review the Biology department’s Procedures and Guidelines webpage description of how to manage files and directories. "],["biol202-workflow.html", "8 An example BIOL202 workflow", " 8 An example BIOL202 workflow Now that you have reviewed the fundamentals of file and directory management, you should decide how to best organize and manage the work you do for BIOL202. Here we’ll provide one example approach that most if not all of you will find useful. "],["onedrive.html", "8.1 Microsoft OneDrive", " 8.1 Microsoft OneDrive Our suggested approach assumes you have set up a Microsoft account through UBC (using your CWL), and have set up the OneDrive application on your own computer, which automatically syncs (when you’re online) selected files/directories between your local computer and your OneDrive account in the cloud. Why OneDrive? As a UBC student, you receive 1TB of free storage! And you also get piece of mind knowing that your files are secure and up-to-date (provided you have an internet connection), and that OneDrive has something called “version control,” which saves old versions of files and allows you to see those versions if you wish, so long as you maintain the same file name. WAIT A SECOND! In the “File Naming” instructions that I just reviewed, I was instructed to create a new file with a new version number in the filename (e.g. with a “V0,” “V1,” “V2” etc…) each time I worked on it! Those instructions are entirely valid! However, when you have access to a version control system, like OneDrive, it is better to keep the file name the same, rather than changing it each time you update it. For example, your markdown file (which as a “.Rmd” extension to the name) that you use for your tutorial work should maintain the same name throughout the term, rather than saving a new file each time you do substantive work on it. Assuming your files are syncing properly between your computer and OneDrive (and this simply requires that you’re connected to the internet), you will always be able to see (and if desired, restore) old versions of your files. If you haven’t set up OneDrive yet, follow the instructions provided at this UBC IT website. Note Using OneDrive is entirely optional. If you choose not to use OneDrive, please follow the file naming instructions from the Procedures and Guidelines document. And you can still follow the directory structure instructions below, regardless of where you set up your directories (OneDrive or not). "],["dir-structure.html", "8.2 Directory structure", " 8.2 Directory structure We anticipate three general categories of work being undertaken: Lecture work, including annotating lecture notes (e.g. on PDFs or PowerPoints) and writing study notes of your own (e.g. using Word) Tutorial work, including practicing what you learn in tutorials using RStudio and R Markdown, and commenting about tips, or tricky bits Lab assignment work, in which you answer questions using R and R Markdown and create a document for submission and grading Each of these categories of work should have their own directory, and all three of these directories should exist within a “root” directory called “BIOL202.” "],["setup-dirs.html", "8.3 Steps to set up directories", " 8.3 Steps to set up directories Having successfully installed OneDrive, you should see a “OneDrive” folder on your computer In your OneDrive folder, create a root directory “BIOL202” to host all of your BIOL202 work Create a \"_README.txt file for the root BIOL202 directory, as per instructions in the Biology Procedures and Guidelines webpage. Within the BIOL202 root directory, create three (sub)directories: “BIOL202_lecture” “BIOL202_tutorials” “BIOL202_assignments” Create a \"_README.txt\" file in each of the three sub-directories The BIOL202 directory, and all its contents, will now sync regularly to your online OneDrive account, so that you can access your up-to-date files from any device upon which OneDrive is installed. It is possible to work on files stored on your local computer when you’re offline; they just won’t sync to the cloud until you’ve gotten back online. "],["lecture-workflow.html", "8.4 Lecture workflow", " 8.4 Lecture workflow The directory for your lecture work is now ready to house any lecture-related work that you do. For instance, if you wish to type up study notes in a Word document, you could call that file “Pither_BIOL202_lecture-notes.docx.” Each time you add/edit/update it, OneDrive will keep old versions for you! "],["tutorial-workflow.html", "8.5 Tutorial workflow", " 8.5 Tutorial workflow How you manage your tutorial workflow comes down to personal preference. The instructions provided below create an RStudio project in the “BIOL202_tutorials” directory (see below), and then create a single R Markdown document, formatted to have sections (headers) for each tutorial you work on. This approach makes it easier to find all of your work in the R Markdown file, so long as it is formatted logically. I have created an R Markdown file that you can download and use for this purpose, and we’ll download that a bit later. First, we need to set up an RStudio project. "],["create-project.html", "8.6 Create an RStudio Project", " 8.6 Create an RStudio Project It is best to organize all your R work using RStudio “projects.” For your tutorial work, for example, you will create a new project that will be housed in your “BIOL202_tutorials” directory To do this, open RStudio then select File &gt; New Project. Then select the option to use an existing directory, and locate and select your tutorial directory. Provide a name for your project file, such as “BIOL202_tutorial,” then select OK. If it asks to open a new RStudio session, you can say yes. RStudio has now created an RStudio project file that has an “Rproj” extension at the end of the name. This “Rproj” file is the file that you will open (double-click with the mouse) each time you wish to work on your tutorial material. You should see the “Rproj” file in the bottom right files panel of RStudio. "],["create-subdirs.html", "8.7 Create subdirectories", " 8.7 Create subdirectories Your tutorial work may involve creating and saving outputs like figures or files, in which case you should have sub-directories for these purposes in your root directory. See the example provided in the Procedures and Guidelines document. Let’s illustrate the procedure by creating a subdirectory called “figures,” and this time we’ll use R to create the directory. First, let’s install and load an R package called here that will help with file and directory management and navigation. The necessary code lines are as follows: install.packages(&quot;here&quot;) library(here) When you load the library, the here function takes stock of where your RStudio project file is located, and establishes that directory as the “working directory.” It should return a file path for you. In future tutorials we’ll make use of the here package when saving files. This is a helpful post about the utility of the here package. "],["edit-markdown.html", "8.8 Edit an R markdown file", " 8.8 Edit an R markdown file In a previous tutorial you learned how to create an R Markdown file, but generally you won’t need to do this in this course, because you’ll be provided starter documents to work with. I have created an R Markdown file that you can download and use for starting your tutorial work. To do this, copy and paste the following code into your command console in RStudio (the bottom left panel), and press return: download.file(&quot;https://raw.githubusercontent.com/ubco-biology/BIOL202/main/more/Example_tutorial_markdown.Rmd&quot;, &quot;BIOL202_tutorial_markdown.Rmd&quot;) This download.file command takes a URL address for a file stored online, and then tells R where to save it, and what name to use. Here we will save the RMD file in your “working directory,” which is the “BIOL202_tutorials” directory. It should show up in the “files” pane in the bottom right RStudio panel. Click on the \"BIOL202_tutorial_markdown.Rmd file to open it. This is the R Markdown file that you’ll edit/add to throughout the term. It has some starting instructions / example text already, and you’re welcome to delete / change that. Change the “author” information at the top of the document (in the header) to your name. Save your file again by clicking the save icon in the top left For the basics on formatting in R Markdown, consult the R Markdown reference guide "],["components-of-an-r-markdown-file.html", "8.9 Components of an R Markdown file", " 8.9 Components of an R Markdown file At this point, you should familiarize yourself with the components of a markdown file. Read through section 4.2 of this online tutorial and watch the videos there too "],["interacting-with-tutorial-material.html", "8.10 Interacting with Tutorial material", " 8.10 Interacting with Tutorial material Students have typically worked through tutorials by reading the material, typing helpful notes in their markdown document, and copying and pasting any R code into “chunks” within their R Markdown document, then running those chunks. You can insert as many chunks as you’d like. Chunk insertion is achieved by selecting the green “+” icon at top of the editor panel, and selecting “R.” Or go to the “Code” menu drop down and “Insert Chunk.” The key advice: keep your work organized by using headings. There’s an option to view your headings all in one navigation pane by clicking on the navigation pane icon at the top right of your editor panel. "],["assign-workflow.html", "8.11 Lab assignments workflow", " 8.11 Lab assignments workflow You can repeat the same steps from earlier for creating a new RStudio project for your lab work. But this time when you create the project, specify your lab assignment directory “BIOL202_assignments” as the location. You can optionally create subdirectories also, perhaps one for each of the lab assignments. The key difference in the assignments workflow is that for each assignment you’ll start with a new R Markdown (Rmd) file, which you’ll download from Canvas under the “assignments” link. The document will include the questions you are to answer, and you simply edit / add to the document as you answer them. Instructions for this will come in a later tutorial. Next tutorial: Practicing completing a very short lab assignment using R Markdown. "]]
