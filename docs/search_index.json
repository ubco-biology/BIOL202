[["what_is_R.html", "1 What are R and RStudio?", " 1 What are R and RStudio? It is assumed that you are using R via RStudio. First time users often confuse the two. At its simplest: R is like a car’s engine RStudio is like a car’s dashboard R: Engine RStudio: Dashboard More precisely, R is a programming language that runs computations while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. So the way of having access to a speedometer, rearview mirrors, and a navigation system makes driving much easier, using RStudio’s interface makes using R much easier as well. "],["install_R_Rstudio.html", "1.1 Installing R and RStudio", " 1.1 Installing R and RStudio Note The latest version of R is 4.1.1 (“Kick Things”). It is strongly recommended that you install this latest version, even if you have older versions already installed. However If you have an older operating system on your computer, you’ll want to check compatibility of both R and RStudio. The RStudio website should detect your operating system and provide the appropriate download option automatically. The website with older versions of R is here, and older versions of RStudio is here. Follow the instructions below, and optionally you can view this YouTube video here prior to starting the steps. Download and install both R and RStudio (Desktop version) on your computer. Note R needs to be installed successfully &gt;prior&lt; to installing RStudio (because the latter depends on the former) Figure out what operating system (and version) you have on your computer (e.g. Windows 10; Mac OS X 10.15 “Big Sur”) Go to this website and click on the appropriate download link at the top of the page (depending on your operating system, Windows / MacOS / Linux) For Windows users, download the “base” version; this file will be called something like R-4.1.1-win.exe. Executing this file launches a familiar Windows Setup Wizard that will install R on your computer. For Mac users, download the “pkg” file that is appropriate for your version of MacOS; the file will be called something like R-4.1.1.pkg. Download and run this installation package—just accept the default options and you will be ready to go. Now to install RStudio: once you have installed “R”, go to this website and click on the “download” button in the top right corner, then select the blue button underneath the “RStudio Desktop FREE” column. Then, click on the appropriate link under the “Installers for Supported Platforms” heading; this again depends on what platform / operating system you’re using. It will likely be one of the first two options. "],["start_r.html", "2 Start using R &amp; RStudio", " 2 Start using R &amp; RStudio Recall our car analogy from a previous tutorial. Much as we don’t drive a car by interacting directly with the engine but rather by using elements on the car’s dashboard, we won’t be using R directly but rather we will use RStudio’s interface. After you install R and RStudio on your computer, you’ll have two new programs AKA applications you can open. We will always work in RStudio and not R. In other words: R: Do not open this RStudio: Open this Launch RStudio on your computer to make sure it’s working (it loads R for you in the background). "],["Rstudio_interface.html", "2.1 The RStudio Interface", " 2.1 The RStudio Interface When you open RStudio, you should see something similar to the following: Note the four panes which are four panels dividing the screen: the source pane (top left), console pane (bottom left), the files pane (bottom right), and the environment pane (top right). Over the course of this chapter, you’ll come to learn what purpose each of these panes serves. "],["coding_basics.html", "2.2 Coding basics", " 2.2 Coding basics Please go through section 1.2 of the ModernDive online text called “How do I code in R?”. This should take about 15 minutes. "],["packages.html", "2.3 R packages", " 2.3 R packages An R package is a collection of functions, data, and documentation that extends the capabilities of R. They are written by a world-wide community of R users. For example, among the most popular packages are: ggplot2 package for data visualization dplyr package for data wrangling tidyverse, which is a package that includes a collection of multiple packages (including the preceding two) that are all installed at once. We’ll be using this package in the course. There are two key things to remember about R packages: Installation: Most packages are not installed by default when you install R and RStudio. You need to install a package before you can use it. Once you’ve installed it, you likely don’t need to install it again unless you want to update it to a newer version of the package. Loading: Packages are not loaded automatically when you open RStudio. You need to load them everytime you open RStudio. "],["package_install.html", "2.4 Package installation", " 2.4 Package installation Let’s install the tidyverse package. There are two ways to install an R package: In the Files pane: Click on “Packages” Click on “Install” Type the name of the package under “Packages (separate multiple with space or comma):” In this case, type tidyverse Click “Install” Alternatively, in the Console pane type the following (NOTE never include this code within your R Markdown document; only install packages by typing directly in the Console): install.packages(&quot;tidyverse&quot;) Note When working on your own computer, you only need to install a package once, unless you want to update an already installed package to the latest version (something you might do every 6 months or so). HOWEVER: If you’re working on a school computer (in a computer lab or in the library), you may need to install packages each session, because local files are deleted daily. If you’re unsure what packages are already installed, consult the “packages” tab in the lower-right RStudio pane when you start up RStudio; installed packages are listed there. "],["package_load.html", "2.5 Package loading", " 2.5 Package loading Let’s load the tidyverse package. After you’ve installed a package, you can now load it using the library() command. For example, to load the tidyverse package, run the following code in the Console pane: library(tidyverse) Note You have to reload each package you want to use every time you open a new session of RStudio. This is a little annoying to get used to and will be your most common error as you begin. When you see an error such as Error: could not find function remember that this likely comes from you trying to use a function in a package that has not been loaded. Remember to run the library() function with the appropriate package to fix this error. "],["intro_markdown.html", "2.6 Intro to R Markdown", " 2.6 Intro to R Markdown As you may have learned already from section 6 of the Biology Procedures and Guidelines resource, R Markdown is a markup language that provides an easy way to produce a rich, fully-documented reproducible analysis. It allows its user to share a single file that contains all of the commentary, R code, and metadata needed to reproduce the analysis from beginning to end. R Markdown allows for “chunks” of R code to be included along with Markdown text to produce a nicely formatted HTML, PDF, or Word file without having to know any complicated programming languages or having to fuss with getting the formatting just right in a Microsoft Word DOCX file. One R Markdown file can generate a variety of different formats and all of this is done in a single text file with a few bits of formatting. You’ll be pleasantly surprised at how easy it is to write an R Markdown document after your first few attempts. We will be using R Markdown to create reproducible lab reports. Note R Markdown is just one flavour of a markup language. RStudio can be used to edit R Markdown. There are many other markdown editors out there, but using RStudio is good for our purposes. "],["lit_programming.html", "2.7 Literate programming with R Markdown", " 2.7 Literate programming with R Markdown View the following short video: Why use R Markdown for Lab Reports? The preceding video described what can be referred to as literate programming: authoring a single document that integrates data analysis (executable code) with textual documentation, linking data, code, and text. In R Markdown, the executable R code is placed in “chunks”, and these are embedded throughout sections of regular text. For an example of an HTML (webpage) document that illustrates the effectiveness of literate programming, take a look at this HTML output - a webpage that accompanied a lab-based experiment examining the potential for freshwater diatoms to be successfully dispersed over long distances adhered to duck feathers. View the following youtube video on creating an R Markdown document: webpage. Optional If you’d like additional introductory tutorials on R Markdown, see this one from RStudio, or this one. "],["veryify_knit.html", "2.8 Making sure R Markdown knits to PDF", " 2.8 Making sure R Markdown knits to PDF Now we’re going to ensure R Markdown works the way we want. A key functionality we need is being able to “knit” our report to PDF format. For this, we need to install the tinytex package {#install_tinytex}. Copy and paste the following two lines of code into the command console of RStudio (the bottom left window panel), then press return: install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() RStudio will take a minute or two to install a bunch of things. Once it’s done, we’re ready to try knitting to PDF! Reminder Recall you only need to install a package once! And this should be the last time you need to deal with the tinytex package (you won’t need to “load” it in future), because now that it’s installed, its functionality works in the background with RStudio. While in RStudio, select the “+” dropdown icon at top left of RStudio window, and select R Markdown. RStudio may at this point install a bunch of things, and if so that’s ok. A window will then appear and you can replace the “Untitled” with something like “Test”, then select OK. This will open an R Markdown document in the top left panel. Don’t worry about all the text in there at this point. What we want to do is test whether it will “knit” (render) the document to PDF format. To do this: Select the “Knit” drop-down icon near the top left of the RStudio window, and select “Knit to PDF”. RStudio will ask you to first save the markdown file (save it anywhere with any name for now), then it will process the markdown file and render it to PDF. In a future tutorial we’ll discuss how to use R Markdown as part of a reproducible workflow. "],["r_resources.html", "2.9 Extra resources", " 2.9 Extra resources Note This page is still under development (Aug 2022) If you are googling for R code, make sure to also include package names in your search query (if you are using a specific package). For example, instead of googling “scatterplot in R”, google “scatterplot in R with ggplot2”. Rstudio provides links to several cheatsheets that will come in handy throughout the semester. You can get nice PDF versions of the files by going to Help -&gt; Cheatsheets inside RStudio: The book titled “Getting used to R, RStudio, and R Markdown” by Chester Ismay, which can be freely accessed here, is also a wonderful resource for for new users of R, RStudio, and R Markdown. It includes examples showing working with R Markdown files in RStudio recorded as GIFs. "],["online_resources.html", "2.10 R Resources Online", " 2.10 R Resources Online Learning R - Tutorials and workshop materials URL Purpose https://whitlockschluter3e.zoology.ubc.ca. R resources to accompany Whitlock &amp; Schluter text https://datacarpentry.org/R-genomics/01-intro-to-R.htm l Data Carpentry Intro R tutorials https://r-dir.com/learn/tutorials.html List of useful tutorials including videos https://www.rstudio.com/resources/webinars/ Various online learning materials at RStudio https://rmd4sci.njtierney.com R Markdown for Scientists http://r4ds.had.co.nz/index.html Hadley Wickham’s online book So many packages - how to find useful ones? URL Purpose http://blog.revolutionanalytics.com/beginner-tips/ Beginner tips https://mran.microsoft.com/packages/ Tool for exploring packages Data analysis in R URL Purpose https://www.zoology.ubc.ca/~schluter/R/ UBC zoology site handy stats reference http://statmethods.net/ Good general reference Data visualization in R URL Purpose http://statmethods.net/ Good general reference for graphing http://ggplot2.org/book/ Hadley Wickhams’s ggplot2 book online http://stats.idre.ucla.edu/r/seminars/ggplot2_intro/ Great tutorial on ggplot2 http://www.cookbook-r.com/Graphs/ Graphing with ggplot2 BLOGs and general resources URL Purpose https://www.r-bloggers.com/ Popular blog site, lots of info http://rseek.org/ Search engine for R help Resources for reproducible research / open science URL Purpose https://cos.io/ Center for Open Science https://ropensci.org/ Open science R resources http://geoscripting-wur.github.io/RProjectManagement/ Lessons about version control https://nicercode.github.io/ Helping to improve your code URL Purpose http://spatial.ly/r/ Example maps with R https://rstudio.github.io/leaflet/ Online mapping with R https://www.earthdatascience.org/courses/earth-analytics/ Excellent course https://geoscripting-wur.github.io/ Amazing “geoscripting” tutorial "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
